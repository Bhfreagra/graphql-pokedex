// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  pokemon: (where?: PokemonWhereInput) => Promise<boolean>;
  pokemonType: (where?: PokemonTypeWhereInput) => Promise<boolean>;
  type: (where?: TypeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  pokemon: (where: PokemonWhereUniqueInput) => PokemonNullablePromise;
  pokemons: (args?: {
    where?: PokemonWhereInput;
    orderBy?: PokemonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Pokemon>;
  pokemonsConnection: (args?: {
    where?: PokemonWhereInput;
    orderBy?: PokemonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PokemonConnectionPromise;
  pokemonType: (
    where: PokemonTypeWhereUniqueInput
  ) => PokemonTypeNullablePromise;
  pokemonTypes: (args?: {
    where?: PokemonTypeWhereInput;
    orderBy?: PokemonTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PokemonType>;
  pokemonTypesConnection: (args?: {
    where?: PokemonTypeWhereInput;
    orderBy?: PokemonTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PokemonTypeConnectionPromise;
  type: (where: TypeWhereUniqueInput) => TypeNullablePromise;
  types: (args?: {
    where?: TypeWhereInput;
    orderBy?: TypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Type>;
  typesConnection: (args?: {
    where?: TypeWhereInput;
    orderBy?: TypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TypeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPokemon: (data: PokemonCreateInput) => PokemonPromise;
  updatePokemon: (args: {
    data: PokemonUpdateInput;
    where: PokemonWhereUniqueInput;
  }) => PokemonPromise;
  updateManyPokemons: (args: {
    data: PokemonUpdateManyMutationInput;
    where?: PokemonWhereInput;
  }) => BatchPayloadPromise;
  upsertPokemon: (args: {
    where: PokemonWhereUniqueInput;
    create: PokemonCreateInput;
    update: PokemonUpdateInput;
  }) => PokemonPromise;
  deletePokemon: (where: PokemonWhereUniqueInput) => PokemonPromise;
  deleteManyPokemons: (where?: PokemonWhereInput) => BatchPayloadPromise;
  createPokemonType: (data: PokemonTypeCreateInput) => PokemonTypePromise;
  updatePokemonType: (args: {
    data: PokemonTypeUpdateInput;
    where: PokemonTypeWhereUniqueInput;
  }) => PokemonTypePromise;
  updateManyPokemonTypes: (args: {
    data: PokemonTypeUpdateManyMutationInput;
    where?: PokemonTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertPokemonType: (args: {
    where: PokemonTypeWhereUniqueInput;
    create: PokemonTypeCreateInput;
    update: PokemonTypeUpdateInput;
  }) => PokemonTypePromise;
  deletePokemonType: (where: PokemonTypeWhereUniqueInput) => PokemonTypePromise;
  deleteManyPokemonTypes: (
    where?: PokemonTypeWhereInput
  ) => BatchPayloadPromise;
  createType: (data: TypeCreateInput) => TypePromise;
  updateType: (args: {
    data: TypeUpdateInput;
    where: TypeWhereUniqueInput;
  }) => TypePromise;
  updateManyTypes: (args: {
    data: TypeUpdateManyMutationInput;
    where?: TypeWhereInput;
  }) => BatchPayloadPromise;
  upsertType: (args: {
    where: TypeWhereUniqueInput;
    create: TypeCreateInput;
    update: TypeUpdateInput;
  }) => TypePromise;
  deleteType: (where: TypeWhereUniqueInput) => TypePromise;
  deleteManyTypes: (where?: TypeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  pokemon: (
    where?: PokemonSubscriptionWhereInput
  ) => PokemonSubscriptionPayloadSubscription;
  pokemonType: (
    where?: PokemonTypeSubscriptionWhereInput
  ) => PokemonTypeSubscriptionPayloadSubscription;
  type: (
    where?: TypeSubscriptionWhereInput
  ) => TypeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PokemonTypesListInput =
  | "Normal"
  | "Fire"
  | "Water"
  | "Grass"
  | "Electric"
  | "Ice"
  | "Fighting"
  | "Poison"
  | "Ground"
  | "Flying"
  | "Psychic"
  | "Bug"
  | "Rock"
  | "Ghost"
  | "Dark"
  | "Dragon"
  | "Steel"
  | "Fairy";

export type PokemonTypeOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "slot_ASC"
  | "slot_DESC";

export type PokemonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "order_ASC"
  | "order_DESC"
  | "sprite_ASC"
  | "sprite_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type TypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PokemonTypeCreateInput {
  _id?: Maybe<ID_Input>;
  slot: Int;
  type: TypeCreateOneInput;
}

export type PokemonWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface PokemonUpdateInput {
  name?: Maybe<String>;
  order?: Maybe<Int>;
  sprite?: Maybe<String>;
  types?: Maybe<PokemonTypeUpdateManyInput>;
}

export interface TypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<PokemonTypesListInput>;
  name_not?: Maybe<PokemonTypesListInput>;
  name_in?: Maybe<PokemonTypesListInput[] | PokemonTypesListInput>;
  name_not_in?: Maybe<PokemonTypesListInput[] | PokemonTypesListInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TypeWhereInput[] | TypeWhereInput>;
  OR?: Maybe<TypeWhereInput[] | TypeWhereInput>;
  NOT?: Maybe<TypeWhereInput[] | TypeWhereInput>;
}

export type TypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PokemonTypeUpdateWithWhereUniqueNestedInput {
  where: PokemonTypeWhereUniqueInput;
  data: PokemonTypeUpdateDataInput;
}

export interface PokemonTypeScalarWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  slot?: Maybe<Int>;
  slot_not?: Maybe<Int>;
  slot_in?: Maybe<Int[] | Int>;
  slot_not_in?: Maybe<Int[] | Int>;
  slot_lt?: Maybe<Int>;
  slot_lte?: Maybe<Int>;
  slot_gt?: Maybe<Int>;
  slot_gte?: Maybe<Int>;
  AND?: Maybe<PokemonTypeScalarWhereInput[] | PokemonTypeScalarWhereInput>;
  OR?: Maybe<PokemonTypeScalarWhereInput[] | PokemonTypeScalarWhereInput>;
  NOT?: Maybe<PokemonTypeScalarWhereInput[] | PokemonTypeScalarWhereInput>;
}

export interface PokemonTypeUpdateManyInput {
  create?: Maybe<PokemonTypeCreateInput[] | PokemonTypeCreateInput>;
  update?: Maybe<
    | PokemonTypeUpdateWithWhereUniqueNestedInput[]
    | PokemonTypeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PokemonTypeUpsertWithWhereUniqueNestedInput[]
    | PokemonTypeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PokemonTypeWhereUniqueInput[] | PokemonTypeWhereUniqueInput>;
  connect?: Maybe<PokemonTypeWhereUniqueInput[] | PokemonTypeWhereUniqueInput>;
  set?: Maybe<PokemonTypeWhereUniqueInput[] | PokemonTypeWhereUniqueInput>;
  disconnect?: Maybe<
    PokemonTypeWhereUniqueInput[] | PokemonTypeWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PokemonTypeScalarWhereInput[] | PokemonTypeScalarWhereInput
  >;
  updateMany?: Maybe<
    | PokemonTypeUpdateManyWithWhereNestedInput[]
    | PokemonTypeUpdateManyWithWhereNestedInput
  >;
}

export interface PokemonTypeUpsertWithWhereUniqueNestedInput {
  where: PokemonTypeWhereUniqueInput;
  update: PokemonTypeUpdateDataInput;
  create: PokemonTypeCreateInput;
}

export interface PokemonWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  sprite?: Maybe<String>;
  sprite_not?: Maybe<String>;
  sprite_in?: Maybe<String[] | String>;
  sprite_not_in?: Maybe<String[] | String>;
  sprite_lt?: Maybe<String>;
  sprite_lte?: Maybe<String>;
  sprite_gt?: Maybe<String>;
  sprite_gte?: Maybe<String>;
  sprite_contains?: Maybe<String>;
  sprite_not_contains?: Maybe<String>;
  sprite_starts_with?: Maybe<String>;
  sprite_not_starts_with?: Maybe<String>;
  sprite_ends_with?: Maybe<String>;
  sprite_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  types_every?: Maybe<PokemonTypeWhereInput>;
  types_some?: Maybe<PokemonTypeWhereInput>;
  types_none?: Maybe<PokemonTypeWhereInput>;
  AND?: Maybe<PokemonWhereInput[] | PokemonWhereInput>;
  OR?: Maybe<PokemonWhereInput[] | PokemonWhereInput>;
  NOT?: Maybe<PokemonWhereInput[] | PokemonWhereInput>;
}

export interface TypeUpsertNestedInput {
  update: TypeUpdateDataInput;
  create: TypeCreateInput;
}

export interface PokemonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PokemonWhereInput>;
  AND?: Maybe<PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput>;
  OR?: Maybe<PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput>;
  NOT?: Maybe<PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput>;
}

export interface TypeUpdateDataInput {
  name?: Maybe<PokemonTypesListInput>;
  url?: Maybe<String>;
}

export interface TypeUpdateInput {
  name?: Maybe<PokemonTypesListInput>;
  url?: Maybe<String>;
}

export interface PokemonTypeUpdateInput {
  slot?: Maybe<Int>;
  type?: Maybe<TypeUpdateOneRequiredInput>;
}

export interface PokemonUpdateManyMutationInput {
  name?: Maybe<String>;
  order?: Maybe<Int>;
  sprite?: Maybe<String>;
}

export interface PokemonCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  order: Int;
  sprite: String;
  types?: Maybe<PokemonTypeCreateManyInput>;
}

export interface PokemonTypeUpdateManyWithWhereNestedInput {
  where: PokemonTypeScalarWhereInput;
  data: PokemonTypeUpdateManyDataInput;
}

export interface PokemonTypeCreateManyInput {
  create?: Maybe<PokemonTypeCreateInput[] | PokemonTypeCreateInput>;
  connect?: Maybe<PokemonTypeWhereUniqueInput[] | PokemonTypeWhereUniqueInput>;
}

export interface PokemonTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PokemonTypeWhereInput>;
  AND?: Maybe<
    PokemonTypeSubscriptionWhereInput[] | PokemonTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    PokemonTypeSubscriptionWhereInput[] | PokemonTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PokemonTypeSubscriptionWhereInput[] | PokemonTypeSubscriptionWhereInput
  >;
}

export interface TypeUpdateOneRequiredInput {
  create?: Maybe<TypeCreateInput>;
  update?: Maybe<TypeUpdateDataInput>;
  upsert?: Maybe<TypeUpsertNestedInput>;
  connect?: Maybe<TypeWhereUniqueInput>;
}

export interface PokemonTypeUpdateManyMutationInput {
  slot?: Maybe<Int>;
}

export interface PokemonTypeUpdateDataInput {
  slot?: Maybe<Int>;
  type?: Maybe<TypeUpdateOneRequiredInput>;
}

export interface PokemonTypeWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  slot?: Maybe<Int>;
  slot_not?: Maybe<Int>;
  slot_in?: Maybe<Int[] | Int>;
  slot_not_in?: Maybe<Int[] | Int>;
  slot_lt?: Maybe<Int>;
  slot_lte?: Maybe<Int>;
  slot_gt?: Maybe<Int>;
  slot_gte?: Maybe<Int>;
  type?: Maybe<TypeWhereInput>;
  AND?: Maybe<PokemonTypeWhereInput[] | PokemonTypeWhereInput>;
  OR?: Maybe<PokemonTypeWhereInput[] | PokemonTypeWhereInput>;
  NOT?: Maybe<PokemonTypeWhereInput[] | PokemonTypeWhereInput>;
}

export interface TypeCreateInput {
  id?: Maybe<ID_Input>;
  name: PokemonTypesListInput;
  url: String;
}

export interface TypeCreateOneInput {
  create?: Maybe<TypeCreateInput>;
  connect?: Maybe<TypeWhereUniqueInput>;
}

export type PokemonTypeWhereUniqueInput = AtLeastOne<{
  _id: Maybe<ID_Input>;
}>;

export interface TypeUpdateManyMutationInput {
  name?: Maybe<PokemonTypesListInput>;
  url?: Maybe<String>;
}

export interface TypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TypeWhereInput>;
  AND?: Maybe<TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput>;
  OR?: Maybe<TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput>;
  NOT?: Maybe<TypeSubscriptionWhereInput[] | TypeSubscriptionWhereInput>;
}

export interface PokemonTypeUpdateManyDataInput {
  slot?: Maybe<Int>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TypePreviousValues {
  id: ID_Output;
  name: PokemonTypesListInput;
  url: String;
  createdAt: DateTimeOutput;
}

export interface TypePreviousValuesPromise
  extends Promise<TypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<PokemonTypesListInput>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TypePreviousValuesSubscription
  extends Promise<AsyncIterator<TypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<PokemonTypesListInput>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PokemonEdge {
  node: Pokemon;
  cursor: String;
}

export interface PokemonEdgePromise extends Promise<PokemonEdge>, Fragmentable {
  node: <T = PokemonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PokemonEdgeSubscription
  extends Promise<AsyncIterator<PokemonEdge>>,
    Fragmentable {
  node: <T = PokemonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PokemonType {
  _id: ID_Output;
  slot: Int;
}

export interface PokemonTypePromise extends Promise<PokemonType>, Fragmentable {
  _id: () => Promise<ID_Output>;
  slot: () => Promise<Int>;
  type: <T = TypePromise>() => T;
}

export interface PokemonTypeSubscription
  extends Promise<AsyncIterator<PokemonType>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  slot: () => Promise<AsyncIterator<Int>>;
  type: <T = TypeSubscription>() => T;
}

export interface PokemonTypeNullablePromise
  extends Promise<PokemonType | null>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  slot: () => Promise<Int>;
  type: <T = TypePromise>() => T;
}

export interface AggregatePokemon {
  count: Int;
}

export interface AggregatePokemonPromise
  extends Promise<AggregatePokemon>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePokemonSubscription
  extends Promise<AsyncIterator<AggregatePokemon>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PokemonTypeSubscriptionPayload {
  mutation: MutationType;
  node: PokemonType;
  updatedFields: String[];
  previousValues: PokemonTypePreviousValues;
}

export interface PokemonTypeSubscriptionPayloadPromise
  extends Promise<PokemonTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PokemonTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PokemonTypePreviousValuesPromise>() => T;
}

export interface PokemonTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PokemonTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PokemonTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PokemonTypePreviousValuesSubscription>() => T;
}

export interface Type {
  id: ID_Output;
  name: PokemonTypesListInput;
  url: String;
  createdAt: DateTimeOutput;
}

export interface TypePromise extends Promise<Type>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<PokemonTypesListInput>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TypeSubscription
  extends Promise<AsyncIterator<Type>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<PokemonTypesListInput>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TypeNullablePromise
  extends Promise<Type | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<PokemonTypesListInput>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AggregateType {
  count: Int;
}

export interface AggregateTypePromise
  extends Promise<AggregateType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTypeSubscription
  extends Promise<AsyncIterator<AggregateType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TypeEdge {
  node: Type;
  cursor: String;
}

export interface TypeEdgePromise extends Promise<TypeEdge>, Fragmentable {
  node: <T = TypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TypeEdgeSubscription
  extends Promise<AsyncIterator<TypeEdge>>,
    Fragmentable {
  node: <T = TypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Pokemon {
  id: ID_Output;
  name: String;
  order: Int;
  sprite: String;
  createdAt: DateTimeOutput;
}

export interface PokemonPromise extends Promise<Pokemon>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  order: () => Promise<Int>;
  sprite: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  types: <T = FragmentableArray<PokemonType>>(args?: {
    where?: PokemonTypeWhereInput;
    orderBy?: PokemonTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PokemonSubscription
  extends Promise<AsyncIterator<Pokemon>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  sprite: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  types: <T = Promise<AsyncIterator<PokemonTypeSubscription>>>(args?: {
    where?: PokemonTypeWhereInput;
    orderBy?: PokemonTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PokemonNullablePromise
  extends Promise<Pokemon | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  order: () => Promise<Int>;
  sprite: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  types: <T = FragmentableArray<PokemonType>>(args?: {
    where?: PokemonTypeWhereInput;
    orderBy?: PokemonTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PokemonTypeEdge {
  node: PokemonType;
  cursor: String;
}

export interface PokemonTypeEdgePromise
  extends Promise<PokemonTypeEdge>,
    Fragmentable {
  node: <T = PokemonTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PokemonTypeEdgeSubscription
  extends Promise<AsyncIterator<PokemonTypeEdge>>,
    Fragmentable {
  node: <T = PokemonTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PokemonPreviousValues {
  id: ID_Output;
  name: String;
  order: Int;
  sprite: String;
  createdAt: DateTimeOutput;
}

export interface PokemonPreviousValuesPromise
  extends Promise<PokemonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  order: () => Promise<Int>;
  sprite: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PokemonPreviousValuesSubscription
  extends Promise<AsyncIterator<PokemonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  sprite: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PokemonSubscriptionPayload {
  mutation: MutationType;
  node: Pokemon;
  updatedFields: String[];
  previousValues: PokemonPreviousValues;
}

export interface PokemonSubscriptionPayloadPromise
  extends Promise<PokemonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PokemonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PokemonPreviousValuesPromise>() => T;
}

export interface PokemonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PokemonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PokemonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PokemonPreviousValuesSubscription>() => T;
}

export interface PokemonTypePreviousValues {
  _id: ID_Output;
  slot: Int;
}

export interface PokemonTypePreviousValuesPromise
  extends Promise<PokemonTypePreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  slot: () => Promise<Int>;
}

export interface PokemonTypePreviousValuesSubscription
  extends Promise<AsyncIterator<PokemonTypePreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  slot: () => Promise<AsyncIterator<Int>>;
}

export interface PokemonConnection {
  pageInfo: PageInfo;
  edges: PokemonEdge[];
}

export interface PokemonConnectionPromise
  extends Promise<PokemonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PokemonEdge>>() => T;
  aggregate: <T = AggregatePokemonPromise>() => T;
}

export interface PokemonConnectionSubscription
  extends Promise<AsyncIterator<PokemonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PokemonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePokemonSubscription>() => T;
}

export interface TypeSubscriptionPayload {
  mutation: MutationType;
  node: Type;
  updatedFields: String[];
  previousValues: TypePreviousValues;
}

export interface TypeSubscriptionPayloadPromise
  extends Promise<TypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TypePreviousValuesPromise>() => T;
}

export interface TypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TypePreviousValuesSubscription>() => T;
}

export interface PokemonTypeConnection {
  pageInfo: PageInfo;
  edges: PokemonTypeEdge[];
}

export interface PokemonTypeConnectionPromise
  extends Promise<PokemonTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PokemonTypeEdge>>() => T;
  aggregate: <T = AggregatePokemonTypePromise>() => T;
}

export interface PokemonTypeConnectionSubscription
  extends Promise<AsyncIterator<PokemonTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PokemonTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePokemonTypeSubscription>() => T;
}

export interface AggregatePokemonType {
  count: Int;
}

export interface AggregatePokemonTypePromise
  extends Promise<AggregatePokemonType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePokemonTypeSubscription
  extends Promise<AsyncIterator<AggregatePokemonType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TypeConnection {
  pageInfo: PageInfo;
  edges: TypeEdge[];
}

export interface TypeConnectionPromise
  extends Promise<TypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TypeEdge>>() => T;
  aggregate: <T = AggregateTypePromise>() => T;
}

export interface TypeConnectionSubscription
  extends Promise<AsyncIterator<TypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTypeSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Pokemon",
    embedded: false
  },
  {
    name: "PokemonType",
    embedded: false
  },
  {
    name: "Type",
    embedded: false
  },
  {
    name: "PokemonOrderByInput",
    embedded: false
  },
  {
    name: "PokemonTypesListInput",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
